[tool.poetry]
name = "mining-assist"
version = "0.1.0"
description = "Python-based RL agent for 3D game automation with mode detection and context-specific policies"
authors = ["Colin Swenson-Healey <chozandrias76@gmail.com>"]
readme = "../README.md"
packages = [{include = "mining_assist", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.15"
dxcam = ">=0.0.5,<0.0.6"
gymnasium = ">=1.2.1,<2.0.0"
mss = ">=10.1.0,<11.0.0"
numpy = ">=2.0.0,<2.3.0"
omegaconf = ">=2.3.0,<3.0.0"
opencv-python = ">=4.12.0.88,<5.0.0.0"
pynput = ">=1.8.1,<2.0.0"
pywin32 = {version = ">=311,<312", markers = "sys_platform == 'win32'"}
stable-baselines3 = ">=2.7.0,<3.0.0"
torch = ">=2.9.0,<3.0.0"
torchvision = ">=0.24.0,<0.25.0"
tqdm = ">=4.67.1,<5.0.0"
vgamepad = ">=0.1.0,<0.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
pyright = "^1.1.0"
pre-commit = "^3.0.0"
commitizen = "^3.12.0"

[tool.poetry.scripts]
mining-assist = "mining_assist.main:main"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["mining_assist"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # allow assert in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "dxcam.*",
    "mss.*",
    "vgamepad.*",
    "pynput.*",
    "pywin32.*"
]
ignore_missing_imports = true

[tool.pyright]
include = ["src", "scripts", "tests"]
exclude = ["**/__pycache__"]
defineConstant = { DEBUG = true }
stubPath = "src"
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.11"
pythonPlatform = "Windows"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src/mining_assist --cov-report=term-missing --cov-report=html"

# Test markers for different test types
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "e2e: End-to-end tests for complete workflows"
]

[tool.coverage.run]
source = ["src/mining_assist"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[tool.commitizen.settings]
# Enforce conventional commit format
# Types: feat, fix, docs, style, refactor, test, chore
# Format: type(scope): description
# Example: feat(auth): add login functionality
allowed_prefixes = [
    "feat",
    "fix",
    "docs",
    "style",
    "refactor",
    "test",
    "chore",
    "build",
    "ci",
    "perf",
    "revert"
]
